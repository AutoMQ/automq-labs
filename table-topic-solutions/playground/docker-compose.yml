services:
  automq:
    image: automqinc/automq:1.6.0
    container_name: automq
    hostname: automq
    stop_grace_period: 1m
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      - KAFKA_S3_ACCESS_KEY=admin
      - KAFKA_S3_SECRET_KEY=password
      - KAFKA_HEAP_OPTS=-Xms1g -Xmx4g -XX:MetaspaceSize=96m -XX:MaxDirectMemorySize=1G
      - CLUSTER_ID=3D4fXN-yS1-vsQ8aJ_q4Mg
    command:
      - bash
      - -c
      - |
        /opt/automq/kafka/bin/kafka-server-start.sh \
        /opt/automq/kafka/config/kraft/server.properties \
        --override cluster.id=$$CLUSTER_ID \
        --override node.id=0 \
        --override controller.quorum.voters=0@automq:9093 \
        --override controller.quorum.bootstrap.servers=automq:9093 \
        --override listeners=PLAINTEXT://:9092,CONTROLLER://:9093 \
        --override advertised.listeners=PLAINTEXT://automq:9092 \
        --override s3.data.buckets='0@s3://automq-data?region=us-east-1&endpoint=http://minio:9000&pathStyle=true' \
        --override s3.ops.buckets='1@s3://automq-ops?region=us-east-1&endpoint=http://minio:9000&pathStyle=true' \
        --override s3.wal.path='0@s3://automq-data?region=us-east-1&endpoint=http://minio:9000&pathStyle=true' \
        --override automq.table.topic.catalog.type=rest \
        --override automq.table.topic.catalog.uri=http://rest:8181 \
        --override automq.table.topic.catalog.warehouse=s3://warehouse/wh/ \
        --override automq.table.topic.namespace=default \
        --override automq.table.topic.schema.registry.url=http://schema-registry:8081
    healthcheck:
      test: ["CMD-SHELL", "/opt/automq/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server localhost:9092"]
      interval: 20s
      timeout: 20s
      retries: 5
      start_period: 20s
    depends_on:
      - minio
      - mc

  minio:
    image: minio/minio:RELEASE.2025-05-24T17-08-30Z
    container_name: minio
    hostname: warehouse.minio
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
      - MINIO_DOMAIN=minio
    ports:
      - "9000:9000"
      - "9001:9001"
    command: ["server", "/data", "--console-address", ":9001"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://minio:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 3

  mc:
    image: minio/mc:RELEASE.2025-05-21T01-59-54Z
    container_name: mc
    hostname: mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc alias set minio http://minio:9000 admin password) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc rm -r --force minio/automq-data;
      /usr/bin/mc rm -r --force minio/automq-ops;
      /usr/bin/mc rm -r --force minio/warehouse;
      /usr/bin/mc mb minio/automq-data;
      /usr/bin/mc mb minio/automq-ops;
      /usr/bin/mc mb minio/warehouse;
      /usr/bin/mc anonymous set public minio/automq-data;
      /usr/bin/mc anonymous set public minio/automq-ops;
      /usr/bin/mc anonymous set public minio/warehouse;
      tail -f /dev/null
      "

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    container_name: schema-registry
    hostname: schema-registry
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: automq:9092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    depends_on:
      automq:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081 || exit 1"]
      interval: 10s
      timeout: 60s
      retries: 30

  kafka-client:
    build: ./tools/kafka-client
    container_name: kafka-client
    hostname: kafka-client
    environment:
      SCHEMA_REGISTRY_HOST_NAME: kafka-client
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: automq:9092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8082
    command: ["/home/kafka-client/setup.sh"]
    volumes:
      - ./tools/kafka-client:/home/kafka-client

  rest:
    image: apache/iceberg-rest-fixture
    container_name: iceberg-rest
    hostname: rest
    ports:
      - 8181:8181
    depends_on:
      minio:
        condition: service_healthy
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
      - CATALOG_WAREHOUSE=s3://warehouse/
      - CATALOG_IO__IMPL=org.apache.iceberg.aws.s3.S3FileIO
      - CATALOG_S3_ENDPOINT=http://minio:9000
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8181/v1/config || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 30s

  spark-iceberg:
    image: tabulario/spark-iceberg
    container_name: spark-iceberg
    hostname: spark-iceberg
    depends_on:
      - rest
      - minio
    volumes:
      - /tmp/warehouse:/home/iceberg/warehouse
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    ports:
      - 8888:8888
      - 8080:8080
      - 10000:10000
      - 10001:10001

  trino:
    image: trinodb/trino:472
    container_name: trino
    hostname: trino
    depends_on:
      - rest
      - minio
    ports:
      - "8090:8080"
    volumes:
      - ./tools/trino-catalog:/etc/trino/catalog
