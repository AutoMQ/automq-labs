set working-directory := ".."
SCHEMA_REGISTRY_URL := "http://schema-registry:8081"

default: help

help:
    @echo "Protobuf latest-schema Scenario (raw + by_latest_schema)"
    @echo "  register                                Register sample protobuf schemas (required)"
    @echo "  create-product-topic [topic]            default: product (messageFullName)"
    @echo "  create-user-topic [topic]               default: user    (messageFullName)"
    @echo "  send-product-raw [topic]                default: product"
    @echo "  send-user-raw [topic]                   default: user"
    @echo "  show-ddl [table]                        Show CREATE TABLE (product/user)"
    @echo "  show-snapshots [table]                  Show snapshots"
    @echo "  show-history [table]                    Show history"
    @echo "  show-files [table]                      Show data files"
    @echo "  show-manifests [table]                  Show manifests"
    @echo "  query-product                           Query product table"
    @echo "  query-user                              Query user table"
    @echo "  test                                    run full scenario test"

register:
    @echo "Registering sample protobuf schemas (user/product) to Schema Registry..."
    docker compose -f docker-compose.yml exec -w /home/kafka-client/sample/protobuf-sample kafka-client mvn schema-registry:register@register


create-product-topic topic='product' message_full_name='examples.clients.proto.ProductData':
    docker exec automq /opt/automq/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 \
      --create --topic {{topic}} --partitions 16 \
      --config automq.table.topic.enable=true \
      --config automq.table.topic.commit.interval.ms=1000 \
      --config automq.table.topic.convert.value.type=by_latest_schema \
      --config automq.table.topic.transform.value.type=flatten \
      --config automq.table.topic.namespace=default \
      --config automq.table.topic.convert.value.by_latest_schema.message.full.name={{message_full_name}} || true

create-user-topic topic='user' message_full_name='examples.clients.proto.UserData':
    docker exec automq /opt/automq/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 \
      --create --topic {{topic}} --partitions 16 \
      --config automq.table.topic.enable=true \
      --config automq.table.topic.commit.interval.ms=1000 \
      --config automq.table.topic.convert.value.type=by_latest_schema \
      --config automq.table.topic.transform.value.type=flatten \
      --config automq.table.topic.namespace=default \
      --config automq.table.topic.convert.value.by_latest_schema.message.full.name={{message_full_name}} || true

send-product-raw topic='product':
    @echo "Producing Protobuf raw (product) to {{topic}}"
    bash protobuf-latest-scenario/scripts/produce-protobuf-raw.sh {{topic}} product

send-user-raw topic='user':
    @echo "Producing Protobuf raw (user) to {{topic}}"
    bash protobuf-latest-scenario/scripts/produce-protobuf-raw.sh {{topic}} user


query-product:
    @just trino-sql 'SELECT * FROM iceberg.default.product LIMIT 20'

query-user:
    @just trino-sql 'SELECT * FROM iceberg.default."user" LIMIT 20'

show-ddl table='product':
    @just trino-sql 'SHOW CREATE TABLE iceberg.default."{{table}}"'

show-snapshots table='product':
    @just trino-sql 'SELECT * FROM iceberg.default."{{table}}$snapshots" ORDER BY committed_at DESC LIMIT 20'

show-history table='product':
    @just trino-sql 'SELECT * FROM iceberg.default."{{table}}$history" ORDER BY made_current_at DESC LIMIT 20'

show-files table='product':
    @just trino-sql 'SELECT content, file_format, record_count, file_size_in_bytes, file_path FROM iceberg.default."{{table}}$files" LIMIT 50'

show-manifests table='product':
    @just trino-sql 'SELECT * FROM iceberg.default."{{table}}$manifests" LIMIT 50'

# Test scenario - runs the complete protobuf scenario workflow
test:
    @echo "Starting Protobuf Latest Scenario Test..."

    @just up
    @echo "Step 1: Register Protobuf Schemas"
    @just -f protobuf-latest-scenario/justfile register
    @sleep 10

    @echo "Step 2: Create Table Topics"
    @just -f protobuf-latest-scenario/justfile create-product-topic
    @sleep 5
    @just -f protobuf-latest-scenario/justfile create-user-topic
    @sleep 5

    @echo "Step 3: Produce Raw Protobuf Data"
    @just -f protobuf-latest-scenario/justfile send-product-raw
    @just -f protobuf-latest-scenario/justfile send-user-raw
    @sleep 15

    @echo "Step 4: View Table DDL"
    @just -f protobuf-latest-scenario/justfile show-ddl product
    @just -f protobuf-latest-scenario/justfile show-ddl user
    @sleep 10

    @echo "Step 5: Query Iceberg Data"
    @just -f protobuf-latest-scenario/justfile query-product
    @just -f protobuf-latest-scenario/justfile query-user

    @echo "Protobuf Latest Scenario Test Completed Successfully"
    @just down
